name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: app_db
          POSTGRES_USER: app_user
          POSTGRES_PASSWORD: app_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r backend/requirements.dev.txt

      # Step 4: Run linters for Python
      - name: Run flake8
        run: |
          . venv/bin/activate
          flake8 backend

      # Step 5: Run code formatter for Python
      - name: Run black
        run: |
          . venv/bin/activate
          black --check backend

      # Step 6: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      # Step 7: Install Node.js dependencies
      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm install

      # Step 8: Run linters for JavaScript/TypeScript
      - name: Run eslint
        run: |
          cd frontend
          npm run lint

      # Step 9: Run tests for Python
      - name: Run tests
        run: |
          . venv/bin/activate
          python backend/manage.py test

      # Step 10: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Step 11: Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t divanster/recipe-django-backend:latest -f backend/Dockerfile .
          docker push divanster/recipe-django-backend:latest

      # Step 12: Save Docker image to tarball
      - name: Save Docker image to tarball
        run: |
          docker save divanster/recipe-django-backend:latest > recipe-django-backend.tar

      # Step 13: Upload Docker image to GitHub Actions artifacts
      - name: Upload Docker image to GitHub Actions artifacts
        uses: actions/upload-artifact@v2
        with:
          name: recipe-django-backend-image
          path: recipe-django-backend.tar
